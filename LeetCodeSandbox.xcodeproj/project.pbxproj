// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 55;
	objects = {

/* Begin PBXBuildFile section */
		A408B0512979627800DAEA80 /* 974. Subarray Sums Divisible by K.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B0502979627800DAEA80 /* 974. Subarray Sums Divisible by K.swift */; };
		A408B0532979790300DAEA80 /* 2364. Count Number of Bad Pairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B0522979790300DAEA80 /* 2364. Count Number of Bad Pairs.swift */; };
		A408B055297B271100DAEA80 /* 561. Array Partition.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B054297B271100DAEA80 /* 561. Array Partition.swift */; };
		A408B057297B2D3300DAEA80 /* 2155. All Divisions With the Highest Score of a Binary Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B056297B2D3300DAEA80 /* 2155. All Divisions With the Highest Score of a Binary Array.swift */; };
		A408B05B297C739800DAEA80 /* 414. Third Maximum Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B05A297C739800DAEA80 /* 414. Third Maximum Number.swift */; };
		A408B05D297C7F1D00DAEA80 /* 315. Count of Smaller Numbers After Self.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B05C297C7F1D00DAEA80 /* 315. Count of Smaller Numbers After Self.swift */; };
		A408B05F297D611900DAEA80 /* 1720. Decode XORed Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B05E297D611900DAEA80 /* 1720. Decode XORed Array.swift */; };
		A408B061297D632700DAEA80 /* 338. Counting Bits.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B060297D632700DAEA80 /* 338. Counting Bits.swift */; };
		A408B063297D827000DAEA80 /* 231. Power of Two.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B062297D827000DAEA80 /* 231. Power of Two.swift */; };
		A408B065297D86FC00DAEA80 /* 232. Implement Queue using Stacks.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B064297D86FC00DAEA80 /* 232. Implement Queue using Stacks.swift */; };
		A408B067297DCC8100DAEA80 /* 43. Multiply Strings.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B066297DCC8100DAEA80 /* 43. Multiply Strings.swift */; };
		A408B069297DD83100DAEA80 /* 2288. Apply Discount to Prices.swift in Sources */ = {isa = PBXBuildFile; fileRef = A408B068297DD83100DAEA80 /* 2288. Apply Discount to Prices.swift */; };
		A427ADAB297300E300751FAC /* 55. Jump Game.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADAA297300E300751FAC /* 55. Jump Game.swift */; };
		A427ADAD2973034F00751FAC /* 216. Combination Sum III.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADAC2973034F00751FAC /* 216. Combination Sum III.swift */; };
		A427ADAF297410A700751FAC /* 517. Super Washing Machines.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADAE297410A700751FAC /* 517. Super Washing Machines.swift */; };
		A427ADB129742E8D00751FAC /* 2195. Append K Integers With Minimal Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADB029742E8D00751FAC /* 2195. Append K Integers With Minimal Sum.swift */; };
		A427ADB529748E7400751FAC /* 133. Clone Graph.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADB429748E7400751FAC /* 133. Clone Graph.swift */; };
		A427ADB729749B1500751FAC /* 399. Evaluate Division.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADB629749B1500751FAC /* 399. Evaluate Division.swift */; };
		A427ADB92974A51300751FAC /* 785. Is Graph Bipartite?.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADB82974A51300751FAC /* 785. Is Graph Bipartite?.swift */; };
		A427ADBB2975649200751FAC /* 525. Contiguous Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADBA2975649200751FAC /* 525. Contiguous Array.swift */; };
		A427ADBD29759B0B00751FAC /* 155. Min Stack.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADBC29759B0B00751FAC /* 155. Min Stack.swift */; };
		A427ADBF2975CDEF00751FAC /* Stack.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADBE2975CDEF00751FAC /* Stack.swift */; };
		A427ADC12975CF2300751FAC /* 496. Next Greater Element I.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADC02975CF2300751FAC /* 496. Next Greater Element I.swift */; };
		A427ADC32975DD2400751FAC /* 739. Daily Temperatures.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADC22975DD2400751FAC /* 739. Daily Temperatures.swift */; };
		A427ADC72976F31A00751FAC /* 86. Partition List.swift in Sources */ = {isa = PBXBuildFile; fileRef = A427ADC62976F31A00751FAC /* 86. Partition List.swift */; };
		A455E729293CACB9003654B2 /* 209. Minimum Size Subarray Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E728293CACB9003654B2 /* 209. Minimum Size Subarray Sum.swift */; };
		A455E72B293CB37C003654B2 /* 289. Game of Life.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E72A293CB37C003654B2 /* 289. Game of Life.swift */; };
		A455E72D293CBBDC003654B2 /* 290. Word Pattern.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E72C293CBBDC003654B2 /* 290. Word Pattern.swift */; };
		A455E72F293CD171003654B2 /* 318. Maximum Product of Word Lengths.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E72E293CD171003654B2 /* 318. Maximum Product of Word Lengths.swift */; };
		A455E731293D2EBD003654B2 /* 498. Diagonal Traverse.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E730293D2EBD003654B2 /* 498. Diagonal Traverse.swift */; };
		A455E733293DE664003654B2 /* 347. Top K Frequent Elements.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E732293DE664003654B2 /* 347. Top K Frequent Elements.swift */; };
		A455E749293F66D7003654B2 /* Heap.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E748293F66D7003654B2 /* Heap.swift */; };
		A455E74B293F6943003654B2 /* 417. Pacific Atlantic Water Flow.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E74A293F6943003654B2 /* 417. Pacific Atlantic Water Flow.swift */; };
		A455E74F2941270C003654B2 /* 436. Find Right Interval.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E74E2941270C003654B2 /* 436. Find Right Interval.swift */; };
		A455E753294506D9003654B2 /* 24. Swap Nodes in Pairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E752294506D9003654B2 /* 24. Swap Nodes in Pairs.swift */; };
		A455E75529450D42003654B2 /* 45. Jump Game II.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E75429450D42003654B2 /* 45. Jump Game II.swift */; };
		A455E7592945DAC6003654B2 /* 162. Find Peak Element.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7582945DAC6003654B2 /* 162. Find Peak Element.swift */; };
		A455E75B2945F3B2003654B2 /* 179. Largest Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E75A2945F3B2003654B2 /* 179. Largest Number.swift */; };
		A455E75F294B08CE003654B2 /* 398. Random Pick Index.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E75E294B08CE003654B2 /* 398. Random Pick Index.swift */; };
		A455E761294B109E003654B2 /* 383. Ransom Note.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E760294B109E003654B2 /* 383. Ransom Note.swift */; };
		A455E763294B12F1003654B2 /* 389. Find the Difference.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E762294B12F1003654B2 /* 389. Find the Difference.swift */; };
		A455E765294C5DE4003654B2 /* 26. Remove Duplicates from Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E764294C5DE4003654B2 /* 26. Remove Duplicates from Sorted Array.swift */; };
		A455E769294E12F4003654B2 /* 295. Find Median from Data Stream.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E768294E12F4003654B2 /* 295. Find Median from Data Stream.swift */; };
		A455E76B294E3FDE003654B2 /* 480. Sliding Window Median.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E76A294E3FDE003654B2 /* 480. Sliding Window Median.swift */; };
		A455E76D294E4B90003654B2 /* 481. Magical String.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E76C294E4B90003654B2 /* 481. Magical String.swift */; };
		A455E76F294F17E5003654B2 /* 557. Reverse Words in a String III.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E76E294F17E5003654B2 /* 557. Reverse Words in a String III.swift */; };
		A455E771294F2359003654B2 /* 560. Subarray Sum Equals K.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E770294F2359003654B2 /* 560. Subarray Sum Equals K.swift */; };
		A455E77329503949003654B2 /* 77. Combinations.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E77229503949003654B2 /* 77. Combinations.swift */; };
		A455E7752951CFFC003654B2 /* 118. Pascal's Triangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7742951CFFC003654B2 /* 118. Pascal's Triangle.swift */; };
		A455E77729520EC2003654B2 /* 7. Reverse Integer.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E77629520EC2003654B2 /* 7. Reverse Integer.swift */; };
		A455E779295364C9003654B2 /* 66. Plus One.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E778295364C9003654B2 /* 66. Plus One.swift */; };
		A455E77B29544E65003654B2 /* 236. Lowest Common Ancestor of a Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E77A29544E65003654B2 /* 236. Lowest Common Ancestor of a Binary Tree.swift */; };
		A455E77D29559418003654B2 /* 189. Rotate Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E77C29559418003654B2 /* 189. Rotate Array.swift */; };
		A455E77F29559D02003654B2 /* 165. Compare Version Numbers.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E77E29559D02003654B2 /* 165. Compare Version Numbers.swift */; };
		A455E7812955A009003654B2 /* 283. Move Zeroes.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7802955A009003654B2 /* 283. Move Zeroes.swift */; };
		A455E7832955AB03003654B2 /* 279. Perfect Squares.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7822955AB03003654B2 /* 279. Perfect Squares.swift */; };
		A455E7852955B38A003654B2 /* 300. Longest Increasing Subsequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7842955B38A003654B2 /* 300. Longest Increasing Subsequence.swift */; };
		A455E7872955F3A5003654B2 /* 344. Reverse String.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7862955F3A5003654B2 /* 344. Reverse String.swift */; };
		A455E78B2957630C003654B2 /* 33. Search in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E78A2957630C003654B2 /* 33. Search in Rotated Sorted Array.swift */; };
		A455E78F29576AE0003654B2 /* 284. Peeking Iterator.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E78E29576AE0003654B2 /* 284. Peeking Iterator.swift */; };
		A455E79529585161003654B2 /* 400. Nth Digit.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E79429585161003654B2 /* 400. Nth Digit.swift */; };
		A455E7992958CA33003654B2 /* 427. Construct Quad Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7982958CA33003654B2 /* 427. Construct Quad Tree.swift */; };
		A455E79B2958D33C003654B2 /* 2357. Make Array Zero by Subtracting Equal Amounts.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E79A2958D33C003654B2 /* 2357. Make Array Zero by Subtracting Equal Amounts.swift */; };
		A455E79D2958DEA5003654B2 /* 1968. Array With Elements Not Equal to Average of Neighbors.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E79C2958DEA5003654B2 /* 1968. Array With Elements Not Equal to Average of Neighbors.swift */; };
		A455E79F2959F6B3003654B2 /* 455. Assign Cookies.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E79E2959F6B3003654B2 /* 455. Assign Cookies.swift */; };
		A455E7A3295A4831003654B2 /* 136. Single Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7A2295A4831003654B2 /* 136. Single Number.swift */; };
		A455E7A5295A4B08003654B2 /* 349. Intersection of Two Arrays.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7A4295A4B08003654B2 /* 349. Intersection of Two Arrays.swift */; };
		A455E7A7295AE3F5003654B2 /* 64. Minimum Path Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7A6295AE3F5003654B2 /* 64. Minimum Path Sum.swift */; };
		A455E7A9295C342B003654B2 /* 695. Max Area of Island.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7A8295C342B003654B2 /* 695. Max Area of Island.swift */; };
		A455E7AD295DC8AF003654B2 /* 143. Reorder List.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7AC295DC8AF003654B2 /* 143. Reorder List.swift */; };
		A455E7B3295F3BFE003654B2 /* 387. First Unique Character in a String.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7B2295F3BFE003654B2 /* 387. First Unique Character in a String.swift */; };
		A455E7B529636656003654B2 /* 451. Sort Characters By Frequency.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7B429636656003654B2 /* 451. Sort Characters By Frequency.swift */; };
		A455E7B9296491C1003654B2 /* 2341. Maximum Number of Pairs in Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7B8296491C1003654B2 /* 2341. Maximum Number of Pairs in Array.swift */; };
		A455E7BB2964943B003654B2 /* 51. N-Queens.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7BA2964943B003654B2 /* 51. N-Queens.swift */; };
		A455E7BD29649DE0003654B2 /* 1001. Grid Illumination.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7BC29649DE0003654B2 /* 1001. Grid Illumination.swift */; };
		A455E7C32965C30D003654B2 /* 146. LRU Cache.swift in Sources */ = {isa = PBXBuildFile; fileRef = A455E7C22965C30D003654B2 /* 146. LRU Cache.swift */; };
		A46FD60728B11EBF00D33AF7 /* main.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD60628B11EBF00D33AF7 /* main.swift */; };
		A46FD60F28B1213800D33AF7 /* 6. Zigzag Conversion.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD60E28B1213800D33AF7 /* 6. Zigzag Conversion.swift */; };
		A46FD61228B1216A00D33AF7 /* TestCase.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61128B1216A00D33AF7 /* TestCase.swift */; };
		A46FD61428B3A0E000D33AF7 /* 17. Letter Combinations of a Phone Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61328B3A0E000D33AF7 /* 17. Letter Combinations of a Phone Number.swift */; };
		A46FD61628B3A96000D33AF7 /* 13. Roman to Integer.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61528B3A96000D33AF7 /* 13. Roman to Integer.swift */; };
		A46FD61828B3AABC00D33AF7 /* String+Extensions.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61728B3AABC00D33AF7 /* String+Extensions.swift */; };
		A46FD61A28B4E0D100D33AF7 /* 15. 3Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61928B4E0D100D33AF7 /* 15. 3Sum.swift */; };
		A46FD61C28B56BDE00D33AF7 /* 46. Permutations.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61B28B56BDD00D33AF7 /* 46. Permutations.swift */; };
		A46FD61E28B635FE00D33AF7 /* 39. Combination Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A46FD61D28B635FE00D33AF7 /* 39. Combination Sum.swift */; };
		A473EA172966ED370087E751 /* 139. Word Break.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA162966ED370087E751 /* 139. Word Break.swift */; };
		A473EA1C296757390087E751 /* Quick sort.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA1B296757390087E751 /* Quick sort.swift */; };
		A473EA20296848130087E751 /* DisjointSet.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA1F296848130087E751 /* DisjointSet.swift */; };
		A473EA2229685DBB0087E751 /* 128. Longest Consecutive Sequence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA2129685DBB0087E751 /* 128. Longest Consecutive Sequence.swift */; };
		A473EA242969E9330087E751 /* 202. Happy Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA232969E9330087E751 /* 202. Happy Number.swift */; };
		A473EA28296ADAD50087E751 /* 54. Spiral Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA27296ADAD50087E751 /* 54. Spiral Matrix.swift */; };
		A473EA2A296B04CA0087E751 /* 204. Count Primes.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA29296B04CA0087E751 /* 204. Count Primes.swift */; };
		A473EA2E296B64E50087E751 /* 303. Range Sum Query - Immutable.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA2D296B64E50087E751 /* 303. Range Sum Query - Immutable.swift */; };
		A473EA30296D943D0087E751 /* 121. Best Time to Buy and Sell Stock.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA2F296D943D0087E751 /* 121. Best Time to Buy and Sell Stock.swift */; };
		A473EA32296F4AC30087E751 /* 1920. Build Array from Permutation.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA31296F4AC30087E751 /* 1920. Build Array from Permutation.swift */; };
		A473EA342970996A0087E751 /* 1816. Truncate Sentence.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA332970996A0087E751 /* 1816. Truncate Sentence.swift */; };
		A473EA362971A8FB0087E751 /* 229. Majority Element II.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA352971A8FB0087E751 /* 229. Majority Element II.swift */; };
		A473EA382972E8600087E751 /* 287. Find the Duplicate Number.swift in Sources */ = {isa = PBXBuildFile; fileRef = A473EA372972E8600087E751 /* 287. Find the Duplicate Number.swift */; };
		A49B587829374809009B3591 /* 120.Triangle.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B587729374809009B3591 /* 120.Triangle.swift */; };
		A49B587B2938FF6E009B3591 /* 75. Sort colors.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B587A2938FF6E009B3591 /* 75. Sort colors.swift */; };
		A49B5880293A403D009B3591 /* 11. Container With Most Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B587F293A403D009B3591 /* 11. Container With Most Water.swift */; };
		A49B5883293A4BDD009B3591 /* 42. Trapping Rain Water.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B5882293A4BDD009B3591 /* 42. Trapping Rain Water.swift */; };
		A49B5885293B51C5009B3591 /* 238. Product of Array Except Self.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B5884293B51C5009B3591 /* 238. Product of Array Except Self.swift */; };
		A49B5888293B5FF0009B3591 /* 88. Merge Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B5887293B5FF0009B3591 /* 88. Merge Sorted Array.swift */; };
		A49B588E293BC2B1009B3591 /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */ = {isa = PBXBuildFile; fileRef = A49B588D293BC2B1009B3591 /* 153. Find Minimum in Rotated Sorted Array.swift */; };
		A4A7016428B7B9AF00BB3EAE /* 27. Remove Element.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016328B7B9AF00BB3EAE /* 27. Remove Element.swift */; };
		A4A7016628B7D11000BB3EAE /* 28. Implement strStr().swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016528B7D11000BB3EAE /* 28. Implement strStr().swift */; };
		A4A7016828B8BB8700BB3EAE /* 49. Group Anagrams.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016728B8BB8700BB3EAE /* 49. Group Anagrams.swift */; };
		A4A7016A28B8BFB600BB3EAE /* 41. First Missing Positive.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016928B8BFB600BB3EAE /* 41. First Missing Positive.swift */; };
		A4A7016C28B8D5FF00BB3EAE /* 70. Climbing Stairs.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016B28B8D5FF00BB3EAE /* 70. Climbing Stairs.swift */; };
		A4A7016E28B8D8B400BB3EAE /* 74. Search a 2D Matrix.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016D28B8D8B400BB3EAE /* 74. Search a 2D Matrix.swift */; };
		A4A7017028BBD52500BB3EAE /* 67. Add Binary.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4A7016F28BBD52500BB3EAE /* 67. Add Binary.swift */; };
		A4ED365F29783E1400704C0D /* Queue.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4ED365E29783E1400704C0D /* Queue.swift */; };
		A4ED366129783F9C00704C0D /* 19. Remove Nth Node From End of List.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4ED366029783F9C00704C0D /* 19. Remove Nth Node From End of List.swift */; };
		A4ED36632978490400704C0D /* 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4ED36622978490400704C0D /* 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift */; };
		A4ED366529788E1D00704C0D /* 141. Linked List Cycle.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4ED366429788E1D00704C0D /* 141. Linked List Cycle.swift */; };
		A4F4FAD1290D41B700FA2F15 /* 100. Same Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FAD0290D41B700FA2F15 /* 100. Same Tree.swift */; };
		A4F4FAD3290D508500FA2F15 /* 113. Path Sum II.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FAD2290D508500FA2F15 /* 113. Path Sum II.swift */; };
		A4F4FAD5290D5B6D00FA2F15 /* 117. Populating Next Right Pointers in Each Node II.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FAD4290D5B6D00FA2F15 /* 117. Populating Next Right Pointers in Each Node II.swift */; };
		A4F4FAD7290E92AB00FA2F15 /* 109. Convert Sorted List to Binary Search Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FAD6290E92AB00FA2F15 /* 109. Convert Sorted List to Binary Search Tree.swift */; };
		A4F4FAD9290E9F6E00FA2F15 /* 222. Count Complete Tree Nodes.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FAD8290E9F6E00FA2F15 /* 222. Count Complete Tree Nodes.swift */; };
		A4F4FADB290EA77000FA2F15 /* 331. Verify Preorder Serialization of a Binary Tree.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FADA290EA77000FA2F15 /* 331. Verify Preorder Serialization of a Binary Tree.swift */; };
		A4F4FADD290EAFD300FA2F15 /* 124. Binary Tree Maximum Path Sum.swift in Sources */ = {isa = PBXBuildFile; fileRef = A4F4FADC290EAFD300FA2F15 /* 124. Binary Tree Maximum Path Sum.swift */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		A46FD60128B11EBF00D33AF7 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		A408B0502979627800DAEA80 /* 974. Subarray Sums Divisible by K.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "974. Subarray Sums Divisible by K.swift"; sourceTree = "<group>"; };
		A408B0522979790300DAEA80 /* 2364. Count Number of Bad Pairs.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2364. Count Number of Bad Pairs.swift"; sourceTree = "<group>"; };
		A408B054297B271100DAEA80 /* 561. Array Partition.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "561. Array Partition.swift"; sourceTree = "<group>"; };
		A408B056297B2D3300DAEA80 /* 2155. All Divisions With the Highest Score of a Binary Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2155. All Divisions With the Highest Score of a Binary Array.swift"; sourceTree = "<group>"; };
		A408B05A297C739800DAEA80 /* 414. Third Maximum Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "414. Third Maximum Number.swift"; sourceTree = "<group>"; };
		A408B05C297C7F1D00DAEA80 /* 315. Count of Smaller Numbers After Self.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "315. Count of Smaller Numbers After Self.swift"; sourceTree = "<group>"; };
		A408B05E297D611900DAEA80 /* 1720. Decode XORed Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1720. Decode XORed Array.swift"; sourceTree = "<group>"; };
		A408B060297D632700DAEA80 /* 338. Counting Bits.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "338. Counting Bits.swift"; sourceTree = "<group>"; };
		A408B062297D827000DAEA80 /* 231. Power of Two.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "231. Power of Two.swift"; sourceTree = "<group>"; };
		A408B064297D86FC00DAEA80 /* 232. Implement Queue using Stacks.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "232. Implement Queue using Stacks.swift"; sourceTree = "<group>"; };
		A408B066297DCC8100DAEA80 /* 43. Multiply Strings.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "43. Multiply Strings.swift"; sourceTree = "<group>"; };
		A408B068297DD83100DAEA80 /* 2288. Apply Discount to Prices.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2288. Apply Discount to Prices.swift"; sourceTree = "<group>"; };
		A427ADAA297300E300751FAC /* 55. Jump Game.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "55. Jump Game.swift"; sourceTree = "<group>"; };
		A427ADAC2973034F00751FAC /* 216. Combination Sum III.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "216. Combination Sum III.swift"; sourceTree = "<group>"; };
		A427ADAE297410A700751FAC /* 517. Super Washing Machines.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "517. Super Washing Machines.swift"; sourceTree = "<group>"; };
		A427ADB029742E8D00751FAC /* 2195. Append K Integers With Minimal Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2195. Append K Integers With Minimal Sum.swift"; sourceTree = "<group>"; };
		A427ADB429748E7400751FAC /* 133. Clone Graph.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "133. Clone Graph.swift"; sourceTree = "<group>"; };
		A427ADB629749B1500751FAC /* 399. Evaluate Division.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "399. Evaluate Division.swift"; sourceTree = "<group>"; };
		A427ADB82974A51300751FAC /* 785. Is Graph Bipartite?.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "785. Is Graph Bipartite?.swift"; sourceTree = "<group>"; };
		A427ADBA2975649200751FAC /* 525. Contiguous Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "525. Contiguous Array.swift"; sourceTree = "<group>"; };
		A427ADBC29759B0B00751FAC /* 155. Min Stack.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "155. Min Stack.swift"; sourceTree = "<group>"; };
		A427ADBE2975CDEF00751FAC /* Stack.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Stack.swift; sourceTree = "<group>"; };
		A427ADC02975CF2300751FAC /* 496. Next Greater Element I.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "496. Next Greater Element I.swift"; sourceTree = "<group>"; };
		A427ADC22975DD2400751FAC /* 739. Daily Temperatures.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "739. Daily Temperatures.swift"; sourceTree = "<group>"; };
		A427ADC62976F31A00751FAC /* 86. Partition List.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "86. Partition List.swift"; sourceTree = "<group>"; };
		A455E728293CACB9003654B2 /* 209. Minimum Size Subarray Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "209. Minimum Size Subarray Sum.swift"; sourceTree = "<group>"; };
		A455E72A293CB37C003654B2 /* 289. Game of Life.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "289. Game of Life.swift"; sourceTree = "<group>"; };
		A455E72C293CBBDC003654B2 /* 290. Word Pattern.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "290. Word Pattern.swift"; sourceTree = "<group>"; };
		A455E72E293CD171003654B2 /* 318. Maximum Product of Word Lengths.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "318. Maximum Product of Word Lengths.swift"; sourceTree = "<group>"; };
		A455E730293D2EBD003654B2 /* 498. Diagonal Traverse.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "498. Diagonal Traverse.swift"; sourceTree = "<group>"; };
		A455E732293DE664003654B2 /* 347. Top K Frequent Elements.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "347. Top K Frequent Elements.swift"; sourceTree = "<group>"; };
		A455E748293F66D7003654B2 /* Heap.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Heap.swift; sourceTree = "<group>"; };
		A455E74A293F6943003654B2 /* 417. Pacific Atlantic Water Flow.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "417. Pacific Atlantic Water Flow.swift"; sourceTree = "<group>"; };
		A455E74E2941270C003654B2 /* 436. Find Right Interval.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "436. Find Right Interval.swift"; sourceTree = "<group>"; };
		A455E752294506D9003654B2 /* 24. Swap Nodes in Pairs.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "24. Swap Nodes in Pairs.swift"; sourceTree = "<group>"; };
		A455E75429450D42003654B2 /* 45. Jump Game II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "45. Jump Game II.swift"; sourceTree = "<group>"; };
		A455E7582945DAC6003654B2 /* 162. Find Peak Element.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "162. Find Peak Element.swift"; sourceTree = "<group>"; };
		A455E75A2945F3B2003654B2 /* 179. Largest Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "179. Largest Number.swift"; sourceTree = "<group>"; };
		A455E75E294B08CE003654B2 /* 398. Random Pick Index.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "398. Random Pick Index.swift"; sourceTree = "<group>"; };
		A455E760294B109E003654B2 /* 383. Ransom Note.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "383. Ransom Note.swift"; sourceTree = "<group>"; };
		A455E762294B12F1003654B2 /* 389. Find the Difference.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "389. Find the Difference.swift"; sourceTree = "<group>"; };
		A455E764294C5DE4003654B2 /* 26. Remove Duplicates from Sorted Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "26. Remove Duplicates from Sorted Array.swift"; sourceTree = "<group>"; };
		A455E768294E12F4003654B2 /* 295. Find Median from Data Stream.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "295. Find Median from Data Stream.swift"; sourceTree = "<group>"; };
		A455E76A294E3FDE003654B2 /* 480. Sliding Window Median.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "480. Sliding Window Median.swift"; sourceTree = "<group>"; };
		A455E76C294E4B90003654B2 /* 481. Magical String.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "481. Magical String.swift"; sourceTree = "<group>"; };
		A455E76E294F17E5003654B2 /* 557. Reverse Words in a String III.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "557. Reverse Words in a String III.swift"; sourceTree = "<group>"; };
		A455E770294F2359003654B2 /* 560. Subarray Sum Equals K.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "560. Subarray Sum Equals K.swift"; sourceTree = "<group>"; };
		A455E77229503949003654B2 /* 77. Combinations.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "77. Combinations.swift"; sourceTree = "<group>"; };
		A455E7742951CFFC003654B2 /* 118. Pascal's Triangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "118. Pascal's Triangle.swift"; sourceTree = "<group>"; };
		A455E77629520EC2003654B2 /* 7. Reverse Integer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "7. Reverse Integer.swift"; sourceTree = "<group>"; };
		A455E778295364C9003654B2 /* 66. Plus One.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "66. Plus One.swift"; sourceTree = "<group>"; };
		A455E77A29544E65003654B2 /* 236. Lowest Common Ancestor of a Binary Tree.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "236. Lowest Common Ancestor of a Binary Tree.swift"; sourceTree = "<group>"; };
		A455E77C29559418003654B2 /* 189. Rotate Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "189. Rotate Array.swift"; sourceTree = "<group>"; };
		A455E77E29559D02003654B2 /* 165. Compare Version Numbers.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "165. Compare Version Numbers.swift"; sourceTree = "<group>"; };
		A455E7802955A009003654B2 /* 283. Move Zeroes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "283. Move Zeroes.swift"; sourceTree = "<group>"; };
		A455E7822955AB03003654B2 /* 279. Perfect Squares.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "279. Perfect Squares.swift"; sourceTree = "<group>"; };
		A455E7842955B38A003654B2 /* 300. Longest Increasing Subsequence.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "300. Longest Increasing Subsequence.swift"; sourceTree = "<group>"; };
		A455E7862955F3A5003654B2 /* 344. Reverse String.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "344. Reverse String.swift"; sourceTree = "<group>"; };
		A455E78A2957630C003654B2 /* 33. Search in Rotated Sorted Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "33. Search in Rotated Sorted Array.swift"; sourceTree = "<group>"; };
		A455E78E29576AE0003654B2 /* 284. Peeking Iterator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "284. Peeking Iterator.swift"; sourceTree = "<group>"; };
		A455E79429585161003654B2 /* 400. Nth Digit.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "400. Nth Digit.swift"; sourceTree = "<group>"; };
		A455E7982958CA33003654B2 /* 427. Construct Quad Tree.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "427. Construct Quad Tree.swift"; sourceTree = "<group>"; };
		A455E79A2958D33C003654B2 /* 2357. Make Array Zero by Subtracting Equal Amounts.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2357. Make Array Zero by Subtracting Equal Amounts.swift"; sourceTree = "<group>"; };
		A455E79C2958DEA5003654B2 /* 1968. Array With Elements Not Equal to Average of Neighbors.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1968. Array With Elements Not Equal to Average of Neighbors.swift"; sourceTree = "<group>"; };
		A455E79E2959F6B3003654B2 /* 455. Assign Cookies.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "455. Assign Cookies.swift"; sourceTree = "<group>"; };
		A455E7A2295A4831003654B2 /* 136. Single Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "136. Single Number.swift"; sourceTree = "<group>"; };
		A455E7A4295A4B08003654B2 /* 349. Intersection of Two Arrays.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "349. Intersection of Two Arrays.swift"; sourceTree = "<group>"; };
		A455E7A6295AE3F5003654B2 /* 64. Minimum Path Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "64. Minimum Path Sum.swift"; sourceTree = "<group>"; };
		A455E7A8295C342B003654B2 /* 695. Max Area of Island.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "695. Max Area of Island.swift"; sourceTree = "<group>"; };
		A455E7AC295DC8AF003654B2 /* 143. Reorder List.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "143. Reorder List.swift"; sourceTree = "<group>"; };
		A455E7B2295F3BFE003654B2 /* 387. First Unique Character in a String.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "387. First Unique Character in a String.swift"; sourceTree = "<group>"; };
		A455E7B429636656003654B2 /* 451. Sort Characters By Frequency.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "451. Sort Characters By Frequency.swift"; sourceTree = "<group>"; };
		A455E7B8296491C1003654B2 /* 2341. Maximum Number of Pairs in Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2341. Maximum Number of Pairs in Array.swift"; sourceTree = "<group>"; };
		A455E7BA2964943B003654B2 /* 51. N-Queens.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "51. N-Queens.swift"; sourceTree = "<group>"; };
		A455E7BC29649DE0003654B2 /* 1001. Grid Illumination.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1001. Grid Illumination.swift"; sourceTree = "<group>"; };
		A455E7C22965C30D003654B2 /* 146. LRU Cache.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "146. LRU Cache.swift"; sourceTree = "<group>"; };
		A46FD60328B11EBF00D33AF7 /* LeetCodeSandbox */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = LeetCodeSandbox; sourceTree = BUILT_PRODUCTS_DIR; };
		A46FD60628B11EBF00D33AF7 /* main.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = main.swift; sourceTree = "<group>"; };
		A46FD60E28B1213800D33AF7 /* 6. Zigzag Conversion.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "6. Zigzag Conversion.swift"; sourceTree = "<group>"; };
		A46FD61128B1216A00D33AF7 /* TestCase.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TestCase.swift; sourceTree = "<group>"; };
		A46FD61328B3A0E000D33AF7 /* 17. Letter Combinations of a Phone Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "17. Letter Combinations of a Phone Number.swift"; sourceTree = "<group>"; };
		A46FD61528B3A96000D33AF7 /* 13. Roman to Integer.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "13. Roman to Integer.swift"; sourceTree = "<group>"; };
		A46FD61728B3AABC00D33AF7 /* String+Extensions.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "String+Extensions.swift"; sourceTree = "<group>"; };
		A46FD61928B4E0D100D33AF7 /* 15. 3Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "15. 3Sum.swift"; sourceTree = "<group>"; };
		A46FD61B28B56BDD00D33AF7 /* 46. Permutations.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "46. Permutations.swift"; sourceTree = "<group>"; };
		A46FD61D28B635FE00D33AF7 /* 39. Combination Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "39. Combination Sum.swift"; sourceTree = "<group>"; };
		A473EA162966ED370087E751 /* 139. Word Break.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "139. Word Break.swift"; sourceTree = "<group>"; };
		A473EA1B296757390087E751 /* Quick sort.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "Quick sort.swift"; sourceTree = "<group>"; };
		A473EA1F296848130087E751 /* DisjointSet.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DisjointSet.swift; sourceTree = "<group>"; };
		A473EA2129685DBB0087E751 /* 128. Longest Consecutive Sequence.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "128. Longest Consecutive Sequence.swift"; sourceTree = "<group>"; };
		A473EA232969E9330087E751 /* 202. Happy Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "202. Happy Number.swift"; sourceTree = "<group>"; };
		A473EA27296ADAD50087E751 /* 54. Spiral Matrix.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "54. Spiral Matrix.swift"; sourceTree = "<group>"; };
		A473EA29296B04CA0087E751 /* 204. Count Primes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "204. Count Primes.swift"; sourceTree = "<group>"; };
		A473EA2D296B64E50087E751 /* 303. Range Sum Query - Immutable.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "303. Range Sum Query - Immutable.swift"; sourceTree = "<group>"; };
		A473EA2F296D943D0087E751 /* 121. Best Time to Buy and Sell Stock.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "121. Best Time to Buy and Sell Stock.swift"; sourceTree = "<group>"; };
		A473EA31296F4AC30087E751 /* 1920. Build Array from Permutation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1920. Build Array from Permutation.swift"; sourceTree = "<group>"; };
		A473EA332970996A0087E751 /* 1816. Truncate Sentence.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "1816. Truncate Sentence.swift"; sourceTree = "<group>"; };
		A473EA352971A8FB0087E751 /* 229. Majority Element II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "229. Majority Element II.swift"; sourceTree = "<group>"; };
		A473EA372972E8600087E751 /* 287. Find the Duplicate Number.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "287. Find the Duplicate Number.swift"; sourceTree = "<group>"; };
		A49B587729374809009B3591 /* 120.Triangle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = 120.Triangle.swift; sourceTree = "<group>"; };
		A49B587A2938FF6E009B3591 /* 75. Sort colors.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "75. Sort colors.swift"; sourceTree = "<group>"; };
		A49B587F293A403D009B3591 /* 11. Container With Most Water.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "11. Container With Most Water.swift"; sourceTree = "<group>"; };
		A49B5882293A4BDD009B3591 /* 42. Trapping Rain Water.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "42. Trapping Rain Water.swift"; sourceTree = "<group>"; };
		A49B5884293B51C5009B3591 /* 238. Product of Array Except Self.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "238. Product of Array Except Self.swift"; sourceTree = "<group>"; };
		A49B5887293B5FF0009B3591 /* 88. Merge Sorted Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "88. Merge Sorted Array.swift"; sourceTree = "<group>"; };
		A49B588D293BC2B1009B3591 /* 153. Find Minimum in Rotated Sorted Array.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "153. Find Minimum in Rotated Sorted Array.swift"; sourceTree = "<group>"; };
		A4A7016328B7B9AF00BB3EAE /* 27. Remove Element.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "27. Remove Element.swift"; sourceTree = "<group>"; };
		A4A7016528B7D11000BB3EAE /* 28. Implement strStr().swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "28. Implement strStr().swift"; sourceTree = "<group>"; };
		A4A7016728B8BB8700BB3EAE /* 49. Group Anagrams.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "49. Group Anagrams.swift"; sourceTree = "<group>"; };
		A4A7016928B8BFB600BB3EAE /* 41. First Missing Positive.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "41. First Missing Positive.swift"; sourceTree = "<group>"; };
		A4A7016B28B8D5FF00BB3EAE /* 70. Climbing Stairs.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "70. Climbing Stairs.swift"; sourceTree = "<group>"; };
		A4A7016D28B8D8B400BB3EAE /* 74. Search a 2D Matrix.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "74. Search a 2D Matrix.swift"; sourceTree = "<group>"; };
		A4A7016F28BBD52500BB3EAE /* 67. Add Binary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "67. Add Binary.swift"; sourceTree = "<group>"; };
		A4ED365E29783E1400704C0D /* Queue.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Queue.swift; sourceTree = "<group>"; };
		A4ED366029783F9C00704C0D /* 19. Remove Nth Node From End of List.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "19. Remove Nth Node From End of List.swift"; sourceTree = "<group>"; };
		A4ED36622978490400704C0D /* 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift"; sourceTree = "<group>"; };
		A4ED366429788E1D00704C0D /* 141. Linked List Cycle.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "141. Linked List Cycle.swift"; sourceTree = "<group>"; };
		A4F4FAD0290D41B700FA2F15 /* 100. Same Tree.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "100. Same Tree.swift"; sourceTree = "<group>"; };
		A4F4FAD2290D508500FA2F15 /* 113. Path Sum II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "113. Path Sum II.swift"; sourceTree = "<group>"; };
		A4F4FAD4290D5B6D00FA2F15 /* 117. Populating Next Right Pointers in Each Node II.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "117. Populating Next Right Pointers in Each Node II.swift"; sourceTree = "<group>"; };
		A4F4FAD6290E92AB00FA2F15 /* 109. Convert Sorted List to Binary Search Tree.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "109. Convert Sorted List to Binary Search Tree.swift"; sourceTree = "<group>"; };
		A4F4FAD8290E9F6E00FA2F15 /* 222. Count Complete Tree Nodes.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "222. Count Complete Tree Nodes.swift"; sourceTree = "<group>"; };
		A4F4FADA290EA77000FA2F15 /* 331. Verify Preorder Serialization of a Binary Tree.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "331. Verify Preorder Serialization of a Binary Tree.swift"; sourceTree = "<group>"; };
		A4F4FADC290EAFD300FA2F15 /* 124. Binary Tree Maximum Path Sum.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "124. Binary Tree Maximum Path Sum.swift"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		A46FD60028B11EBF00D33AF7 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		A455E747293F66CB003654B2 /* Basic data structures */ = {
			isa = PBXGroup;
			children = (
				A455E748293F66D7003654B2 /* Heap.swift */,
				A473EA1F296848130087E751 /* DisjointSet.swift */,
				A427ADBE2975CDEF00751FAC /* Stack.swift */,
				A4ED365E29783E1400704C0D /* Queue.swift */,
			);
			path = "Basic data structures";
			sourceTree = "<group>";
		};
		A46FD5FA28B11EBF00D33AF7 = {
			isa = PBXGroup;
			children = (
				A46FD60528B11EBF00D33AF7 /* LeetCodeSandbox */,
				A46FD60428B11EBF00D33AF7 /* Products */,
			);
			sourceTree = "<group>";
		};
		A46FD60428B11EBF00D33AF7 /* Products */ = {
			isa = PBXGroup;
			children = (
				A46FD60328B11EBF00D33AF7 /* LeetCodeSandbox */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		A46FD60528B11EBF00D33AF7 /* LeetCodeSandbox */ = {
			isa = PBXGroup;
			children = (
				A473EA1A296757110087E751 /* Basic algorithms */,
				A455E747293F66CB003654B2 /* Basic data structures */,
				A46FD61028B1215D00D33AF7 /* Utilities */,
				A46FD60D28B120EB00D33AF7 /* Solutions */,
				A46FD60628B11EBF00D33AF7 /* main.swift */,
			);
			path = LeetCodeSandbox;
			sourceTree = "<group>";
		};
		A46FD60D28B120EB00D33AF7 /* Solutions */ = {
			isa = PBXGroup;
			children = (
				A49B5886293B5FE1009B3591 /* Easy */,
				A49B5881293A4BD3009B3591 /* Hard */,
				A49B58792937481B009B3591 /* Medium */,
			);
			path = Solutions;
			sourceTree = "<group>";
		};
		A46FD61028B1215D00D33AF7 /* Utilities */ = {
			isa = PBXGroup;
			children = (
				A46FD61128B1216A00D33AF7 /* TestCase.swift */,
				A46FD61728B3AABC00D33AF7 /* String+Extensions.swift */,
			);
			path = Utilities;
			sourceTree = "<group>";
		};
		A473EA1A296757110087E751 /* Basic algorithms */ = {
			isa = PBXGroup;
			children = (
				A473EA1B296757390087E751 /* Quick sort.swift */,
			);
			path = "Basic algorithms";
			sourceTree = "<group>";
		};
		A49B58792937481B009B3591 /* Medium */ = {
			isa = PBXGroup;
			children = (
				A46FD60E28B1213800D33AF7 /* 6. Zigzag Conversion.swift */,
				A455E77629520EC2003654B2 /* 7. Reverse Integer.swift */,
				A49B587F293A403D009B3591 /* 11. Container With Most Water.swift */,
				A46FD61928B4E0D100D33AF7 /* 15. 3Sum.swift */,
				A46FD61328B3A0E000D33AF7 /* 17. Letter Combinations of a Phone Number.swift */,
				A455E752294506D9003654B2 /* 24. Swap Nodes in Pairs.swift */,
				A4A7016528B7D11000BB3EAE /* 28. Implement strStr().swift */,
				A455E78A2957630C003654B2 /* 33. Search in Rotated Sorted Array.swift */,
				A46FD61D28B635FE00D33AF7 /* 39. Combination Sum.swift */,
				A455E75429450D42003654B2 /* 45. Jump Game II.swift */,
				A46FD61B28B56BDD00D33AF7 /* 46. Permutations.swift */,
				A4A7016728B8BB8700BB3EAE /* 49. Group Anagrams.swift */,
				A455E7A6295AE3F5003654B2 /* 64. Minimum Path Sum.swift */,
				A4A7016D28B8D8B400BB3EAE /* 74. Search a 2D Matrix.swift */,
				A49B587A2938FF6E009B3591 /* 75. Sort colors.swift */,
				A455E77229503949003654B2 /* 77. Combinations.swift */,
				A4F4FAD6290E92AB00FA2F15 /* 109. Convert Sorted List to Binary Search Tree.swift */,
				A4F4FAD2290D508500FA2F15 /* 113. Path Sum II.swift */,
				A4F4FAD4290D5B6D00FA2F15 /* 117. Populating Next Right Pointers in Each Node II.swift */,
				A49B587729374809009B3591 /* 120.Triangle.swift */,
				A455E7AC295DC8AF003654B2 /* 143. Reorder List.swift */,
				A49B588D293BC2B1009B3591 /* 153. Find Minimum in Rotated Sorted Array.swift */,
				A455E7582945DAC6003654B2 /* 162. Find Peak Element.swift */,
				A455E77E29559D02003654B2 /* 165. Compare Version Numbers.swift */,
				A455E75A2945F3B2003654B2 /* 179. Largest Number.swift */,
				A455E77C29559418003654B2 /* 189. Rotate Array.swift */,
				A455E728293CACB9003654B2 /* 209. Minimum Size Subarray Sum.swift */,
				A4F4FAD8290E9F6E00FA2F15 /* 222. Count Complete Tree Nodes.swift */,
				A455E77A29544E65003654B2 /* 236. Lowest Common Ancestor of a Binary Tree.swift */,
				A49B5884293B51C5009B3591 /* 238. Product of Array Except Self.swift */,
				A455E7822955AB03003654B2 /* 279. Perfect Squares.swift */,
				A455E78E29576AE0003654B2 /* 284. Peeking Iterator.swift */,
				A455E72A293CB37C003654B2 /* 289. Game of Life.swift */,
				A455E7842955B38A003654B2 /* 300. Longest Increasing Subsequence.swift */,
				A455E72E293CD171003654B2 /* 318. Maximum Product of Word Lengths.swift */,
				A4F4FADA290EA77000FA2F15 /* 331. Verify Preorder Serialization of a Binary Tree.swift */,
				A455E732293DE664003654B2 /* 347. Top K Frequent Elements.swift */,
				A455E75E294B08CE003654B2 /* 398. Random Pick Index.swift */,
				A455E79429585161003654B2 /* 400. Nth Digit.swift */,
				A455E74A293F6943003654B2 /* 417. Pacific Atlantic Water Flow.swift */,
				A455E7982958CA33003654B2 /* 427. Construct Quad Tree.swift */,
				A455E74E2941270C003654B2 /* 436. Find Right Interval.swift */,
				A455E7B429636656003654B2 /* 451. Sort Characters By Frequency.swift */,
				A455E76C294E4B90003654B2 /* 481. Magical String.swift */,
				A455E730293D2EBD003654B2 /* 498. Diagonal Traverse.swift */,
				A455E770294F2359003654B2 /* 560. Subarray Sum Equals K.swift */,
				A455E7A8295C342B003654B2 /* 695. Max Area of Island.swift */,
				A455E79C2958DEA5003654B2 /* 1968. Array With Elements Not Equal to Average of Neighbors.swift */,
				A455E7C22965C30D003654B2 /* 146. LRU Cache.swift */,
				A473EA162966ED370087E751 /* 139. Word Break.swift */,
				A473EA2129685DBB0087E751 /* 128. Longest Consecutive Sequence.swift */,
				A473EA27296ADAD50087E751 /* 54. Spiral Matrix.swift */,
				A473EA29296B04CA0087E751 /* 204. Count Primes.swift */,
				A473EA352971A8FB0087E751 /* 229. Majority Element II.swift */,
				A473EA372972E8600087E751 /* 287. Find the Duplicate Number.swift */,
				A427ADAA297300E300751FAC /* 55. Jump Game.swift */,
				A427ADAC2973034F00751FAC /* 216. Combination Sum III.swift */,
				A427ADB029742E8D00751FAC /* 2195. Append K Integers With Minimal Sum.swift */,
				A427ADB429748E7400751FAC /* 133. Clone Graph.swift */,
				A427ADB629749B1500751FAC /* 399. Evaluate Division.swift */,
				A427ADB82974A51300751FAC /* 785. Is Graph Bipartite?.swift */,
				A427ADBA2975649200751FAC /* 525. Contiguous Array.swift */,
				A427ADBC29759B0B00751FAC /* 155. Min Stack.swift */,
				A427ADC22975DD2400751FAC /* 739. Daily Temperatures.swift */,
				A427ADC62976F31A00751FAC /* 86. Partition List.swift */,
				A4ED366029783F9C00704C0D /* 19. Remove Nth Node From End of List.swift */,
				A4ED36622978490400704C0D /* 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift */,
				A408B0502979627800DAEA80 /* 974. Subarray Sums Divisible by K.swift */,
				A408B0522979790300DAEA80 /* 2364. Count Number of Bad Pairs.swift */,
				A408B056297B2D3300DAEA80 /* 2155. All Divisions With the Highest Score of a Binary Array.swift */,
				A408B066297DCC8100DAEA80 /* 43. Multiply Strings.swift */,
				A408B068297DD83100DAEA80 /* 2288. Apply Discount to Prices.swift */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		A49B5881293A4BD3009B3591 /* Hard */ = {
			isa = PBXGroup;
			children = (
				A4F4FADC290EAFD300FA2F15 /* 124. Binary Tree Maximum Path Sum.swift */,
				A4A7016928B8BFB600BB3EAE /* 41. First Missing Positive.swift */,
				A49B5882293A4BDD009B3591 /* 42. Trapping Rain Water.swift */,
				A455E768294E12F4003654B2 /* 295. Find Median from Data Stream.swift */,
				A455E76A294E3FDE003654B2 /* 480. Sliding Window Median.swift */,
				A455E7BA2964943B003654B2 /* 51. N-Queens.swift */,
				A455E7BC29649DE0003654B2 /* 1001. Grid Illumination.swift */,
				A427ADAE297410A700751FAC /* 517. Super Washing Machines.swift */,
				A408B05C297C7F1D00DAEA80 /* 315. Count of Smaller Numbers After Self.swift */,
			);
			path = Hard;
			sourceTree = "<group>";
		};
		A49B5886293B5FE1009B3591 /* Easy */ = {
			isa = PBXGroup;
			children = (
				A46FD61528B3A96000D33AF7 /* 13. Roman to Integer.swift */,
				A455E764294C5DE4003654B2 /* 26. Remove Duplicates from Sorted Array.swift */,
				A4A7016328B7B9AF00BB3EAE /* 27. Remove Element.swift */,
				A455E778295364C9003654B2 /* 66. Plus One.swift */,
				A4A7016F28BBD52500BB3EAE /* 67. Add Binary.swift */,
				A4A7016B28B8D5FF00BB3EAE /* 70. Climbing Stairs.swift */,
				A49B5887293B5FF0009B3591 /* 88. Merge Sorted Array.swift */,
				A4F4FAD0290D41B700FA2F15 /* 100. Same Tree.swift */,
				A455E7742951CFFC003654B2 /* 118. Pascal's Triangle.swift */,
				A455E7A2295A4831003654B2 /* 136. Single Number.swift */,
				A455E7802955A009003654B2 /* 283. Move Zeroes.swift */,
				A455E72C293CBBDC003654B2 /* 290. Word Pattern.swift */,
				A455E7862955F3A5003654B2 /* 344. Reverse String.swift */,
				A455E7A4295A4B08003654B2 /* 349. Intersection of Two Arrays.swift */,
				A455E760294B109E003654B2 /* 383. Ransom Note.swift */,
				A455E7B2295F3BFE003654B2 /* 387. First Unique Character in a String.swift */,
				A455E762294B12F1003654B2 /* 389. Find the Difference.swift */,
				A455E79E2959F6B3003654B2 /* 455. Assign Cookies.swift */,
				A455E76E294F17E5003654B2 /* 557. Reverse Words in a String III.swift */,
				A455E79A2958D33C003654B2 /* 2357. Make Array Zero by Subtracting Equal Amounts.swift */,
				A455E7B8296491C1003654B2 /* 2341. Maximum Number of Pairs in Array.swift */,
				A473EA232969E9330087E751 /* 202. Happy Number.swift */,
				A473EA2D296B64E50087E751 /* 303. Range Sum Query - Immutable.swift */,
				A473EA2F296D943D0087E751 /* 121. Best Time to Buy and Sell Stock.swift */,
				A473EA31296F4AC30087E751 /* 1920. Build Array from Permutation.swift */,
				A473EA332970996A0087E751 /* 1816. Truncate Sentence.swift */,
				A427ADC02975CF2300751FAC /* 496. Next Greater Element I.swift */,
				A4ED366429788E1D00704C0D /* 141. Linked List Cycle.swift */,
				A408B054297B271100DAEA80 /* 561. Array Partition.swift */,
				A408B05A297C739800DAEA80 /* 414. Third Maximum Number.swift */,
				A408B05E297D611900DAEA80 /* 1720. Decode XORed Array.swift */,
				A408B060297D632700DAEA80 /* 338. Counting Bits.swift */,
				A408B062297D827000DAEA80 /* 231. Power of Two.swift */,
				A408B064297D86FC00DAEA80 /* 232. Implement Queue using Stacks.swift */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		A46FD60228B11EBF00D33AF7 /* LeetCodeSandbox */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = A46FD60A28B11EBF00D33AF7 /* Build configuration list for PBXNativeTarget "LeetCodeSandbox" */;
			buildPhases = (
				A46FD5FF28B11EBF00D33AF7 /* Sources */,
				A46FD60028B11EBF00D33AF7 /* Frameworks */,
				A46FD60128B11EBF00D33AF7 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = LeetCodeSandbox;
			productName = LeetCodeSandbox;
			productReference = A46FD60328B11EBF00D33AF7 /* LeetCodeSandbox */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		A46FD5FB28B11EBF00D33AF7 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1340;
				LastUpgradeCheck = 1340;
				TargetAttributes = {
					A46FD60228B11EBF00D33AF7 = {
						CreatedOnToolsVersion = 13.4.1;
					};
				};
			};
			buildConfigurationList = A46FD5FE28B11EBF00D33AF7 /* Build configuration list for PBXProject "LeetCodeSandbox" */;
			compatibilityVersion = "Xcode 13.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = A46FD5FA28B11EBF00D33AF7;
			productRefGroup = A46FD60428B11EBF00D33AF7 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				A46FD60228B11EBF00D33AF7 /* LeetCodeSandbox */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		A46FD5FF28B11EBF00D33AF7 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				A455E7AD295DC8AF003654B2 /* 143. Reorder List.swift in Sources */,
				A4A7016428B7B9AF00BB3EAE /* 27. Remove Element.swift in Sources */,
				A408B055297B271100DAEA80 /* 561. Array Partition.swift in Sources */,
				A455E7B9296491C1003654B2 /* 2341. Maximum Number of Pairs in Array.swift in Sources */,
				A408B061297D632700DAEA80 /* 338. Counting Bits.swift in Sources */,
				A427ADAD2973034F00751FAC /* 216. Combination Sum III.swift in Sources */,
				A4A7016828B8BB8700BB3EAE /* 49. Group Anagrams.swift in Sources */,
				A455E7BB2964943B003654B2 /* 51. N-Queens.swift in Sources */,
				A455E79D2958DEA5003654B2 /* 1968. Array With Elements Not Equal to Average of Neighbors.swift in Sources */,
				A455E76D294E4B90003654B2 /* 481. Magical String.swift in Sources */,
				A455E7592945DAC6003654B2 /* 162. Find Peak Element.swift in Sources */,
				A455E7C32965C30D003654B2 /* 146. LRU Cache.swift in Sources */,
				A4F4FADB290EA77000FA2F15 /* 331. Verify Preorder Serialization of a Binary Tree.swift in Sources */,
				A473EA2E296B64E50087E751 /* 303. Range Sum Query - Immutable.swift in Sources */,
				A455E779295364C9003654B2 /* 66. Plus One.swift in Sources */,
				A455E77729520EC2003654B2 /* 7. Reverse Integer.swift in Sources */,
				A4ED366529788E1D00704C0D /* 141. Linked List Cycle.swift in Sources */,
				A455E7812955A009003654B2 /* 283. Move Zeroes.swift in Sources */,
				A455E7B529636656003654B2 /* 451. Sort Characters By Frequency.swift in Sources */,
				A455E7832955AB03003654B2 /* 279. Perfect Squares.swift in Sources */,
				A408B05B297C739800DAEA80 /* 414. Third Maximum Number.swift in Sources */,
				A46FD61E28B635FE00D33AF7 /* 39. Combination Sum.swift in Sources */,
				A46FD61628B3A96000D33AF7 /* 13. Roman to Integer.swift in Sources */,
				A46FD60728B11EBF00D33AF7 /* main.swift in Sources */,
				A455E7992958CA33003654B2 /* 427. Construct Quad Tree.swift in Sources */,
				A455E79F2959F6B3003654B2 /* 455. Assign Cookies.swift in Sources */,
				A49B587829374809009B3591 /* 120.Triangle.swift in Sources */,
				A4F4FADD290EAFD300FA2F15 /* 124. Binary Tree Maximum Path Sum.swift in Sources */,
				A455E79529585161003654B2 /* 400. Nth Digit.swift in Sources */,
				A455E769294E12F4003654B2 /* 295. Find Median from Data Stream.swift in Sources */,
				A49B5888293B5FF0009B3591 /* 88. Merge Sorted Array.swift in Sources */,
				A455E731293D2EBD003654B2 /* 498. Diagonal Traverse.swift in Sources */,
				A408B069297DD83100DAEA80 /* 2288. Apply Discount to Prices.swift in Sources */,
				A4F4FAD9290E9F6E00FA2F15 /* 222. Count Complete Tree Nodes.swift in Sources */,
				A4A7016E28B8D8B400BB3EAE /* 74. Search a 2D Matrix.swift in Sources */,
				A408B063297D827000DAEA80 /* 231. Power of Two.swift in Sources */,
				A46FD60F28B1213800D33AF7 /* 6. Zigzag Conversion.swift in Sources */,
				A427ADAB297300E300751FAC /* 55. Jump Game.swift in Sources */,
				A427ADBD29759B0B00751FAC /* 155. Min Stack.swift in Sources */,
				A455E7872955F3A5003654B2 /* 344. Reverse String.swift in Sources */,
				A455E74F2941270C003654B2 /* 436. Find Right Interval.swift in Sources */,
				A473EA32296F4AC30087E751 /* 1920. Build Array from Permutation.swift in Sources */,
				A473EA242969E9330087E751 /* 202. Happy Number.swift in Sources */,
				A455E7752951CFFC003654B2 /* 118. Pascal's Triangle.swift in Sources */,
				A455E753294506D9003654B2 /* 24. Swap Nodes in Pairs.swift in Sources */,
				A455E72D293CBBDC003654B2 /* 290. Word Pattern.swift in Sources */,
				A455E729293CACB9003654B2 /* 209. Minimum Size Subarray Sum.swift in Sources */,
				A455E771294F2359003654B2 /* 560. Subarray Sum Equals K.swift in Sources */,
				A455E7BD29649DE0003654B2 /* 1001. Grid Illumination.swift in Sources */,
				A4ED365F29783E1400704C0D /* Queue.swift in Sources */,
				A455E761294B109E003654B2 /* 383. Ransom Note.swift in Sources */,
				A427ADC72976F31A00751FAC /* 86. Partition List.swift in Sources */,
				A49B587B2938FF6E009B3591 /* 75. Sort colors.swift in Sources */,
				A455E749293F66D7003654B2 /* Heap.swift in Sources */,
				A46FD61A28B4E0D100D33AF7 /* 15. 3Sum.swift in Sources */,
				A473EA382972E8600087E751 /* 287. Find the Duplicate Number.swift in Sources */,
				A408B057297B2D3300DAEA80 /* 2155. All Divisions With the Highest Score of a Binary Array.swift in Sources */,
				A408B05F297D611900DAEA80 /* 1720. Decode XORed Array.swift in Sources */,
				A455E7A9295C342B003654B2 /* 695. Max Area of Island.swift in Sources */,
				A408B065297D86FC00DAEA80 /* 232. Implement Queue using Stacks.swift in Sources */,
				A427ADAF297410A700751FAC /* 517. Super Washing Machines.swift in Sources */,
				A455E76B294E3FDE003654B2 /* 480. Sliding Window Median.swift in Sources */,
				A4A7017028BBD52500BB3EAE /* 67. Add Binary.swift in Sources */,
				A427ADBB2975649200751FAC /* 525. Contiguous Array.swift in Sources */,
				A455E77329503949003654B2 /* 77. Combinations.swift in Sources */,
				A46FD61C28B56BDE00D33AF7 /* 46. Permutations.swift in Sources */,
				A455E72F293CD171003654B2 /* 318. Maximum Product of Word Lengths.swift in Sources */,
				A473EA28296ADAD50087E751 /* 54. Spiral Matrix.swift in Sources */,
				A473EA30296D943D0087E751 /* 121. Best Time to Buy and Sell Stock.swift in Sources */,
				A4A7016628B7D11000BB3EAE /* 28. Implement strStr().swift in Sources */,
				A455E7A7295AE3F5003654B2 /* 64. Minimum Path Sum.swift in Sources */,
				A455E72B293CB37C003654B2 /* 289. Game of Life.swift in Sources */,
				A4F4FAD7290E92AB00FA2F15 /* 109. Convert Sorted List to Binary Search Tree.swift in Sources */,
				A455E78B2957630C003654B2 /* 33. Search in Rotated Sorted Array.swift in Sources */,
				A49B5885293B51C5009B3591 /* 238. Product of Array Except Self.swift in Sources */,
				A408B0532979790300DAEA80 /* 2364. Count Number of Bad Pairs.swift in Sources */,
				A427ADC12975CF2300751FAC /* 496. Next Greater Element I.swift in Sources */,
				A455E78F29576AE0003654B2 /* 284. Peeking Iterator.swift in Sources */,
				A4A7016A28B8BFB600BB3EAE /* 41. First Missing Positive.swift in Sources */,
				A49B588E293BC2B1009B3591 /* 153. Find Minimum in Rotated Sorted Array.swift in Sources */,
				A455E7B3295F3BFE003654B2 /* 387. First Unique Character in a String.swift in Sources */,
				A408B067297DCC8100DAEA80 /* 43. Multiply Strings.swift in Sources */,
				A455E733293DE664003654B2 /* 347. Top K Frequent Elements.swift in Sources */,
				A473EA1C296757390087E751 /* Quick sort.swift in Sources */,
				A473EA2229685DBB0087E751 /* 128. Longest Consecutive Sequence.swift in Sources */,
				A4F4FAD5290D5B6D00FA2F15 /* 117. Populating Next Right Pointers in Each Node II.swift in Sources */,
				A455E7852955B38A003654B2 /* 300. Longest Increasing Subsequence.swift in Sources */,
				A473EA172966ED370087E751 /* 139. Word Break.swift in Sources */,
				A455E74B293F6943003654B2 /* 417. Pacific Atlantic Water Flow.swift in Sources */,
				A4F4FAD3290D508500FA2F15 /* 113. Path Sum II.swift in Sources */,
				A427ADB129742E8D00751FAC /* 2195. Append K Integers With Minimal Sum.swift in Sources */,
				A4A7016C28B8D5FF00BB3EAE /* 70. Climbing Stairs.swift in Sources */,
				A455E7A5295A4B08003654B2 /* 349. Intersection of Two Arrays.swift in Sources */,
				A49B5880293A403D009B3591 /* 11. Container With Most Water.swift in Sources */,
				A427ADB729749B1500751FAC /* 399. Evaluate Division.swift in Sources */,
				A473EA342970996A0087E751 /* 1816. Truncate Sentence.swift in Sources */,
				A46FD61228B1216A00D33AF7 /* TestCase.swift in Sources */,
				A473EA2A296B04CA0087E751 /* 204. Count Primes.swift in Sources */,
				A455E77F29559D02003654B2 /* 165. Compare Version Numbers.swift in Sources */,
				A455E75F294B08CE003654B2 /* 398. Random Pick Index.swift in Sources */,
				A427ADB529748E7400751FAC /* 133. Clone Graph.swift in Sources */,
				A4F4FAD1290D41B700FA2F15 /* 100. Same Tree.swift in Sources */,
				A455E7A3295A4831003654B2 /* 136. Single Number.swift in Sources */,
				A455E765294C5DE4003654B2 /* 26. Remove Duplicates from Sorted Array.swift in Sources */,
				A473EA362971A8FB0087E751 /* 229. Majority Element II.swift in Sources */,
				A46FD61828B3AABC00D33AF7 /* String+Extensions.swift in Sources */,
				A427ADBF2975CDEF00751FAC /* Stack.swift in Sources */,
				A4ED36632978490400704C0D /* 2058. Find the Minimum and Maximum Number of Nodes Between Critical Points.swift in Sources */,
				A455E79B2958D33C003654B2 /* 2357. Make Array Zero by Subtracting Equal Amounts.swift in Sources */,
				A49B5883293A4BDD009B3591 /* 42. Trapping Rain Water.swift in Sources */,
				A473EA20296848130087E751 /* DisjointSet.swift in Sources */,
				A455E77B29544E65003654B2 /* 236. Lowest Common Ancestor of a Binary Tree.swift in Sources */,
				A408B0512979627800DAEA80 /* 974. Subarray Sums Divisible by K.swift in Sources */,
				A455E75B2945F3B2003654B2 /* 179. Largest Number.swift in Sources */,
				A4ED366129783F9C00704C0D /* 19. Remove Nth Node From End of List.swift in Sources */,
				A455E75529450D42003654B2 /* 45. Jump Game II.swift in Sources */,
				A455E76F294F17E5003654B2 /* 557. Reverse Words in a String III.swift in Sources */,
				A427ADC32975DD2400751FAC /* 739. Daily Temperatures.swift in Sources */,
				A455E763294B12F1003654B2 /* 389. Find the Difference.swift in Sources */,
				A427ADB92974A51300751FAC /* 785. Is Graph Bipartite?.swift in Sources */,
				A455E77D29559418003654B2 /* 189. Rotate Array.swift in Sources */,
				A46FD61428B3A0E000D33AF7 /* 17. Letter Combinations of a Phone Number.swift in Sources */,
				A408B05D297C7F1D00DAEA80 /* 315. Count of Smaller Numbers After Self.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		A46FD60828B11EBF00D33AF7 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++17";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		A46FD60928B11EBF00D33AF7 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++17";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		A46FD60B28B11EBF00D33AF7 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 3EZN9G7JS8;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		A46FD60C28B11EBF00D33AF7 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 3EZN9G7JS8;
				ENABLE_HARDENED_RUNTIME = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		A46FD5FE28B11EBF00D33AF7 /* Build configuration list for PBXProject "LeetCodeSandbox" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A46FD60828B11EBF00D33AF7 /* Debug */,
				A46FD60928B11EBF00D33AF7 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		A46FD60A28B11EBF00D33AF7 /* Build configuration list for PBXNativeTarget "LeetCodeSandbox" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A46FD60B28B11EBF00D33AF7 /* Debug */,
				A46FD60C28B11EBF00D33AF7 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = A46FD5FB28B11EBF00D33AF7 /* Project object */;
}
